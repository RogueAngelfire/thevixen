{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register/', {\n      'name': name,\n      'email': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}/`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile/update/`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/robincollins/Desktop/thevixen/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n\n  USER_LOGOUT,\n  \n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_RESET,\n\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_RESET,\n} from '../constants/userConstants'\n\n\nexport const login = (email, password) => async (dispatch) => {\n  try{\n    dispatch({ \n      type: USER_LOGIN_REQUEST\n    })\n\n    const config = {\n      headers:{\n        'content-type': 'application/json'\n      }\n    }\n\n    const {data} = await axios.post(\n      '/api/users/login/',\n      { 'username': email, 'password': password },\n      config\n      )\n\n      dispatch({\n        type:USER_LOGIN_SUCCESS,\n        payload:data\n      })\n\n      localStorage.setItem('userInfo', JSON.stringify(data))\n\n\n  }catch(error){\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail\n      ? error.response.data.detail\n      : error.message\n    })\n  }\n}\n\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  dispatch({ type: USER_LOGOUT })\n  dispatch({ type: USER_DETAILS_RESET })\n}\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try{\n    dispatch({ \n      type: USER_REGISTER_REQUEST\n    })\n\n    const config = {\n      headers:{\n        'content-type': 'application/json'\n      }\n    }\n\n    const {data} = await axios.post(\n      '/api/users/register/',\n      { 'name': name, 'email': email, 'password': password },\n      config\n      )\n\n      dispatch({\n        type:USER_REGISTER_SUCCESS,\n        payload:data\n      })\n\n      dispatch({\n        type:USER_LOGIN_SUCCESS,\n        payload:data\n      })\n\n      localStorage.setItem('userInfo', JSON.stringify(data))\n\n\n  }catch(error){\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail\n      ? error.response.data.detail\n      : error.message\n    })\n  }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try{\n    dispatch({ \n      type: USER_DETAILS_REQUEST\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers:{\n        'content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }\n\n    const {data} = await axios.get(\n      `/api/users/${id}/`,\n      config\n      )\n\n      dispatch({\n        type:USER_DETAILS_SUCCESS,\n        payload:data\n      })\n\n\n  }catch(error){\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail\n      ? error.response.data.detail\n      : error.message\n    })\n  }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try{\n    dispatch({ \n      type: USER_UPDATE_PROFILE_REQUEST\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers:{\n        'content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }\n\n    const { data } = await axios.put(\n      `/api/users/profile/update/`,\n      user,\n      config\n      )\n\n      dispatch({\n        type: USER_UPDATE_PROFILE_SUCCESS,\n        payload: data\n      })\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      })\n\n      localStorage.setItem('userInfo', JSON.stringify(data))\n\n  }catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail\n      ? error.response.data.detail\n      : error.message\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}